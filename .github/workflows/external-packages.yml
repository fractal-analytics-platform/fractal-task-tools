name: External packages

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # workflow_dispatch:
  # schedule:
  #   - cron: "0 23 * * 2,3,4"


jobs:
  test-manifest:
    runs-on: ubuntu-22.04
    strategy:
      # Do not make the whole matrix fail if one element fails
      fail-fast: false
      matrix:
        package: [skip]
        github_repo: [skip]
        github_branch: [skip]
        task_list_relative_path: [skip]
        cmd_install: [skip]
        manifest_path: [skip]
        cmd_create_manifest: [skip]
        include:
          - package: fractal-tasks-core
            task_list_relative_path: 'dev.task_list'
            github_repo: fractal-analytics-platform/fractal-tasks-core
            github_branch: test-new-manifest-tools
            cmd_install: 'python -m pip install -e .[fractal-tasks] ./fractal-x[dev]'
            manifest_path: fractal_tasks_core/__FRACTAL_MANIFEST__.json
          # - package: scMultipleX
          #   github_repo: fmi-basel/gliberal-scMultipleX
          #   github_branch: main
          #   cmd_install: 'python -m pip install -e .[fractal-tasks,spherical-harmonics] ./fractal-x[dev]'
          #   manifest_path: src/scmultiplex/__FRACTAL_MANIFEST__.json
          #   cmd_create_manifest: 'fractal-create-manifest  --package scmultiplex --task-list-relative-path dev.task_list --authors "Nicole Repina, Enrico Tagliavini, Tim-Oliver Buchholz, Joel Luethi" --docs-link "https://github.com/fmi-basel/gliberal-scMultipleX"'
          # - package: fractal-helper-tasks
          #   github_repo: jluethi/fractal-helper-tasks
          #   github_branch: main
          #   cmd_install: 'python -m pip install -e . ./fractal-x[dev]'
          #   manifest_path: src/fractal_helper_tasks/__FRACTAL_MANIFEST__.json
          #   cmd_create_manifest: 'fractal-create-manifest  --package fractal_helper_tasks --task-list-relative-path dev.task_list --authors "Joel Luethi" --docs-link "https://github.com/jluethi/fractal-helper-tasks"'
          # - package: APx_fractal_task_collection
          #   github_repo: Apricot-Therapeutics/APx_fractal_task_collection
          #   github_branch: main
          #   cmd_install: 'python -m pip install -e . ./fractal-x[dev]'
          #   manifest_path: src/apx_fractal_task_collection/__FRACTAL_MANIFEST__.json
          #   cmd_create_manifest: 'fractal-create-manifest  --package apx_fractal_task_collection --task-list-relative-path dev.task_list --authors "Adrian Tschan"'
        exclude:
          - package: skip
            github_repo: skip
            github_branch: skip
            task_list_relative_path: skip
            cmd_install: skip
            manifest_path: skip
            cmd_create_manifest: skip

    steps:

      - name: Print matrix-element information
        run: echo '${{ matrix.package }}, ${{ matrix.github_repo }}, ${{ matrix.cmd_install }}, ${{ matrix.cmd_create_manifest }}, ${{ matrix.manifest_path }}'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Update pip
        run:  python -m pip install --upgrade pip

      - name: Get package source code
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.github_repo }}
          ref: ${{ matrix.github_branch }}
          persist-credentials: false

      - name: Get current branch of `fractal-x`
        uses: actions/checkout@v4
        with:
          path: fractal-x
          persist-credentials: false

      - name: Install package
        run:  ${{ matrix.cmd_install }}

      - name: Create manifest
        run: fractal-create-manifest  --package $$ {{ matrix.package }} --task-list-relative-path ${{ matrix.task_list_relative_path }}


      - name: Setup friendly diff style
        run: echo "*.json diff=json" >> .gitattributes && git config diff.json.textconv "jq --sort-keys '.' \$1"

      - name: Run git diff for manifest
        run: git diff ${{ matrix.manifest_path }}

      - name: Clean up before checking repo status
        run: rm -rf fractal-x .gitattributes

      - name: Check repo status
        run: if [[ -z $(git status -s) ]]; then echo "Clean status"; else echo "Dirty status"; git status; exit 1; fi
